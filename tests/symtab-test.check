#include "../src/symtab.h"

#suite Symbol Table

#tcase Creation of a symbol table

#test test_symtab_create
    symtab_t *t = symtab_create();

#tcase Insertion and lookup of a symbol table

#test test_symtab_insert_lookup_same_index
    symtab_t *t = symtab_create();
    int foo_index = (int)symtab_insert(t, "foo");
    int bar_index = (int)symtab_insert(t, "bar");
    int bar_index_2 = (int)symtab_insert(t, "bar");
    ck_assert_int_eq(foo_index, (int)symtab_lookup(t, "foo"));
    ck_assert_int_eq(bar_index, (int)symtab_lookup(t, "bar"));
    ck_assert_int_eq(bar_index_2, (int)symtab_lookup(t, "bar"));

#test test_symtab_mass_insert_lookup_same_index
    symtab_t *t = symtab_create();
    int id_01_index = (int)symtab_insert(t, "id_01");
    int id_02_index = (int)symtab_insert(t, "id_02");
    int id_03_index = (int)symtab_insert(t, "id_03");
    int id_04_index = (int)symtab_insert(t, "id_04");
    int id_05_index = (int)symtab_insert(t, "id_05");
    int id_06_index = (int)symtab_insert(t, "id_06");
    int id_07_index = (int)symtab_insert(t, "id_07");
    int id_08_index = (int)symtab_insert(t, "id_08");
    int id_09_index = (int)symtab_insert(t, "id_09");
    int id_10_index = (int)symtab_insert(t, "id_10");
    int id_11_index = (int)symtab_insert(t, "id_11");
    int id_12_index = (int)symtab_insert(t, "id_12");
    int id_13_index = (int)symtab_insert(t, "id_13");
    int id_14_index = (int)symtab_insert(t, "id_14");
    int id_15_index = (int)symtab_insert(t, "id_15");
    int id_16_index = (int)symtab_insert(t, "id_16");
    ck_assert_int_eq(id_01_index, (int)symtab_lookup(t, "id_01"));
    ck_assert_int_eq(id_02_index, (int)symtab_lookup(t, "id_02"));
    ck_assert_int_eq(id_03_index, (int)symtab_lookup(t, "id_03"));
    ck_assert_int_eq(id_04_index, (int)symtab_lookup(t, "id_04"));
    ck_assert_int_eq(id_05_index, (int)symtab_lookup(t, "id_05"));
    ck_assert_int_eq(id_06_index, (int)symtab_lookup(t, "id_06"));
    ck_assert_int_eq(id_07_index, (int)symtab_lookup(t, "id_07"));
    ck_assert_int_eq(id_08_index, (int)symtab_lookup(t, "id_08"));
    ck_assert_int_eq(id_09_index, (int)symtab_lookup(t, "id_09"));
    ck_assert_int_eq(id_10_index, (int)symtab_lookup(t, "id_10"));
    ck_assert_int_eq(id_11_index, (int)symtab_lookup(t, "id_11"));
    ck_assert_int_eq(id_12_index, (int)symtab_lookup(t, "id_12"));
    ck_assert_int_eq(id_13_index, (int)symtab_lookup(t, "id_13"));
    ck_assert_int_eq(id_14_index, (int)symtab_lookup(t, "id_14"));
    ck_assert_int_eq(id_15_index, (int)symtab_lookup(t, "id_15"));
    ck_assert_int_eq(id_16_index, (int)symtab_lookup(t, "id_16"));

#test test_symtab_insert_unique_index
    symtab_t *t = symtab_create();
    int index_foo = (int)symtab_insert(t, "foo");
    int index_bar = (int)symtab_insert(t, "bar");
    int index_baz = (int)symtab_insert(t, "baz");
    ck_assert_int_ne(index_foo, index_bar);
    ck_assert_int_ne(index_bar, index_baz);

#test test_symtab_insert_lookup_unknown
    symtab_t *t = symtab_create();
    ck_assert(!symtab_lookup(t, "unknown_id"));

#tcase Dumping a symbol table

#test test_symtab_dump_str
    symtab_t *t = symtab_create();
    int index_foo = (int)symtab_insert(t, "foo");
    int index_bar = (int)symtab_insert(t, "bar");
    int index_baz = (int)symtab_insert(t, "baz");
    char *dump = symtab_dump_str(t);
    char *expected_dump = "0\tfoo\n1\tbar\n2\tbaz\n";
    ck_assert_str_eq(dump, expected_dump);

#test test_mass_symtab_dump_str
    symtab_t *t = symtab_create();
    int id_01_index = (int)symtab_insert(t, "id_01");
    int id_02_index = (int)symtab_insert(t, "id_02");
    int id_03_index = (int)symtab_insert(t, "id_03");
    int id_04_index = (int)symtab_insert(t, "id_04");
    int id_05_index = (int)symtab_insert(t, "id_05");
    int id_06_index = (int)symtab_insert(t, "id_06");
    int id_07_index = (int)symtab_insert(t, "id_07");
    int id_08_index = (int)symtab_insert(t, "id_08");
    int id_09_index = (int)symtab_insert(t, "id_09");
    int id_10_index = (int)symtab_insert(t, "id_10");
    int id_11_index = (int)symtab_insert(t, "id_11");
    int id_12_index = (int)symtab_insert(t, "id_12");
    int id_13_index = (int)symtab_insert(t, "id_13");
    int id_14_index = (int)symtab_insert(t, "id_14");
    int id_15_index = (int)symtab_insert(t, "id_15");
    int id_16_index = (int)symtab_insert(t, "id_16");
    char *dump = symtab_dump_str(t);
    char *expected_dump = "0\tid_01\n1\tid_02\n2\tid_03\n3\tid_04\n4\tid_05\n5\tid_06\n6\tid_07\n7\tid_08\n8\tid_09\n9\tid_10\n10\tid_11\n11\tid_12\n12\tid_13\n13\tid_14\n14\tid_15\n15\tid_16\n";
    ck_assert_str_eq(dump, expected_dump);
